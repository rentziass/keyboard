
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behaviour includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */
#define LAYER_Base_MacOS 0
#define LAYER_Linux 1
#define LAYER_Functions 2
#define LAYER_Numbers 3
#define LAYER_Symbols 4
#define LAYER_Mouse_Left 5
#define LAYER_Mouse_Right 6
#define LAYER_Magic 7

/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/* Custom Device-tree */
// KEY_REPEATING_TERM defines how much time you have left (milliseconds)
// after tapping a key to hold it again in order to make it auto-repeat.
#define KEY_REPEATING_TERM 300 // "tap then hold" for key auto-repeat

// TAPPING_TERM defines how long you need to hold (milliseconds)
// mod keys in order to send their modifiers to the computer
// (i.e. "register" them) for mod-click mouse usage (e.g. Ctrl-Click).
#define TAPPING_TERM 260 // TAPPING_TERM + ALLOW_CROSSOVER_AFTER

// AUTO_SHIFT_TERM defines how long you need to hold (milliseconds)
// a key in order to send its shifted version to the computer.
#define AUTO_SHIFT_TERM 200 // AUTO_SHIFT_TERM + ALLOW_CROSSOVER_AFTER

&mt {
    flavor = "hold-preferred";
    tapping-term-ms = <TAPPING_TERM>;
    quick-tap-ms = <KEY_REPEATING_TERM>;
};

&lt {
    flavor = "hold-preferred";
    tapping-term-ms = <TAPPING_TERM>;
    quick-tap-ms = <KEY_REPEATING_TERM>;
};

// ==== MOUSE-KEY <section begins> ====
#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1250
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 100

#include <dt-bindings/zmk/mouse.h>

&mmv {
  acceleration-exponent = <1>;      // 1
  time-to-max-speed-ms = <500>;    // 40
  delay-ms = <0>;                   // 0
};

&msc {
  acceleration-exponent = <1>;      // 0
  time-to-max-speed-ms = <2000>;    // 40
  delay-ms = <0>;                   // 10
};
// ==== MOUSE-KEY <section ends> =====



/* Glove80 system behavior & macros */
/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };
};


/ {
#ifdef BT_DISC_CMD
    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };
    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#else
    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#endif
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };
};

/* #define for key positions */
#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

    /* Custom Defined Behaviors */
/ {
    behaviors {
  // Hold for modifier, tap to toggle layer
  mtog: mod_toggle {
    compatible = "zmk,behavior-hold-tap";
    label = "MOD_TOGGLE";
    #binding-cells = <2>;
    flavor = "hold-preferred";
    tapping-term-ms = <TAPPING_TERM>;
    quick-tap-ms = <KEY_REPEATING_TERM>;
    bindings = <&kp>, <&tog>;
  };

  // Shifted version of a key on a long press
  #define AS(keycode) as LS(keycode) keycode
  as: auto_shift {
    compatible = "zmk,behavior-hold-tap";
    label = "AUTO_SHIFT";
    #binding-cells = <2>;
    tapping_term_ms = <AUTO_SHIFT_TERM>;
    quick_tap_ms = <KEY_REPEATING_TERM>;
    flavor = "tap-preferred";
    bindings = <&kp>, <&kp>;
  };
};

macros {
  // Function arrow: =>
  func_arrow: function_arrow {
    compatible = "zmk,behavior-macro";
    label = "FUNCTION_ARROW";
    #binding-cells = <0>;
    tap-ms = <0>;
    wait-ms = <0>;
    bindings
    = <&macro_tap &kp EQUAL &kp GREATER_THAN>
    ;
  };
};
};

    /* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Base_MacOS {
            bindings = <
             &AS (F2)     &AS (F3)  &AS (F4)  &AS (F5)       &AS (F6)                                                                                                                                                                         &AS (F7)     &AS (F8)  &AS ( F9)        &AS (F10)                  &AS (F11)
             &AS (F1)     &AS (N1)  &AS (N2)  &AS (N3)       &AS (N4)  &AS (N5)                                                                                                                                                 &AS (N6)      &AS (N7)     &AS (N8)   &AS (N9)         &AS (N0)                  &AS (F12)
          &AS (MINUS)      &AS (Q)   &AS (W)   &AS (E)        &AS (R)   &AS (T)                                                                                                                                                  &AS (Y)       &AS (U)      &AS (I)    &AS (O)          &AS (P)                &AS (EQUAL)
            &AS (TAB)      &AS (A)   &AS (S)   &AS (D)        &AS (F)   &AS (G)                                                                                                                                                  &AS (H)       &AS (J)      &AS (K)    &AS (L)  &AS (SEMICOLON)                 &AS (APOS)
            &kp LSHFT      &AS (Z)   &AS (X)   &AS (C)        &AS (V)   &AS (B)            &mt LSHFT RET       &kp LEFT                     &kp RIGHT                       &kp DOWN         &kp UP              &mt RSHFT ESC   &AS (N)       &AS (M)  &AS (COMMA)  &AS (DOT)       &AS (FSLH)                  &kp RSHFT
 &magic LAYER_Magic 0  &AS (GRAVE)  &kp CAPS   &kp DEL  &mt LCTRL ESC            &lt LAYER_Numbers SPACE  &mt LGUI BSPC  &mtog LALT  LAYER_Mouse_Left  &mtog LALT  LAYER_Mouse_Right  &mt RCTRL DEL  &lt LAYER_Functions SPACE            &mt RGUI RET     &kp BSPC  &kp GLOBE       &AS (BSLH)  &as LG(LS(N5)) LG(LS(N4))
            >;
        };

        layer_Linux {
            bindings = <
 &trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans     &trans  &trans     &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans     &trans  &trans     &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans     &trans  &trans     &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans     &trans  &trans     &trans
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans     &trans  &trans     &trans
 &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &kp K_APP  &trans  &kp PSCRN
            >;
        };

        layer_Functions {
            bindings = <
 &kp C_MUTE   &none   &none        &none    &none                                                                                                                &none      &none      &none    &none  &kp C_SLEEP
      &none   &none   &none        &none    &none       &none                                                                                         &none      &none      &none      &none    &none        &none
      &none  &kp F1  &kp F2       &kp F3   &kp F4      &kp F5                                                                                        &kp F6     &kp F7     &kp F8     &kp F9  &kp F10        &none
      &none   &none   &none  &kp LS(TAB)  &kp TAB  &caps_word                                                                                      &kp LEFT   &kp DOWN     &kp UP  &kp RIGHT  &kp F11        &none
      &none   &none   &none        &none    &none       &none                 &trans  &kp C_PAUSE  &kp C_PLAY  &kp C_VOL_DN  &kp C_VOL_UP  &trans  &kp HOME  &kp PG_DN  &kp PG_UP    &kp END  &kp F12        &none
      &none  &trans  &trans       &trans   &trans              &lt LAYER_Symbols ESC       &trans      &trans        &trans        &trans  &trans               &trans     &trans     &trans   &trans        &none
            >;
        };

        layer_Numbers {
            bindings = <
 &kp K_MUTE        &none        &none        &none       &none                                                                                                                                       &none       &none        &none       &none  &kp K_LOCK
      &none        &none        &none        &none       &none       &none                                                                                                       &none               &none       &none        &none       &none       &none
      &none     &AS (N1)     &AS (N2)     &AS (N3)    &AS (N4)    &AS (N5)                                                                                                    &AS (N6)            &AS (N7)    &AS (N8)     &AS (N9)    &AS (N0)       &none
      &none  &AS (MINUS)  &AS (EQUAL)  &AS (GRAVE)  &AS (LBKT)  &AS (RBKT)                                                                                        &as LS(COMMA) LS(N9)  &as LS(DOT) LS(N0)  &AS (APOS)  &func_arrow  &AS (BSLH)       &none
      &none        &none        &none        &none    &AS (N1)       &none  &trans  &kp C_PAUSE  &kp C_PLAY  &kp C_VOL_DN  &kp C_VOL_UP                   &trans                 &none            &AS (N0)   &kp COMMA      &kp DOT  &AS (FSLH)       &none
      &none        &none       &trans       &trans      &trans              &trans       &trans      &trans        &trans        &trans  &lt LAYER_Symbols ENTER                                    &trans      &trans       &trans       &none       &none
            >;
        };

        layer_Symbols {
            bindings = <
 &trans         &trans         &trans         &trans        &trans                                                                                    &trans       &trans       &trans        &trans  &trans
 &trans         &trans         &trans         &trans        &trans        &trans                                                         &trans       &trans       &trans       &trans        &trans  &trans
 &trans     &kp LS(N1)     &kp LS(N2)     &kp LS(N3)    &kp LS(N4)    &kp LS(N5)                                                     &kp LS(N6)   &kp LS(N7)   &kp LS(N8)   &kp LS(N9)    &kp LS(N0)  &trans
 &trans  &kp LS(MINUS)  &kp LS(EQUAL)  &kp LS(GRAVE)  &kp LS(LBKT)  &kp LS(RBKT)                                                  &kp LS(COMMA)  &kp LS(DOT)  &kp LS(SQT)  &func_arrow  &kp LS(BSLH)  &trans
 &trans          &none          &none          &none    &kp LS(N1)         &none  &trans  &trans  &trans  &trans  &trans  &trans          &none   &kp LS(N0)    &kp COMMA      &kp DOT  &kp LS(FSLH)  &trans
 &trans         &trans         &trans         &trans        &trans                &trans  &trans  &trans  &trans  &trans  &trans                      &trans       &trans       &trans        &trans  &trans
            >;
        };

        layer_Mouse_Left {
            bindings = <
  &none   &none           &none           &none            &none                                                                                       &trans  &trans  &trans  &trans  &trans
  &none   &none           &none    &msc SCRL_UP            &none   &none                                                                       &trans  &trans  &trans  &trans  &trans  &trans
  &none   &none  &msc SCRL_LEFT    &mmv MOVE_UP  &msc SCRL_RIGHT   &none                                                                       &trans  &trans  &trans  &trans  &trans  &trans
  &none   &none  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT   &none                                                                       &trans  &trans  &trans  &trans  &trans  &trans
  &none   &none           &none  &msc SCRL_DOWN            &none   &none  &mkp MCLK   &mkp MB4               &mkp MB5  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans          &trans          &trans           &trans          &mkp LCLK  &mkp RCLK  &tog LAYER_Mouse_Left  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_Mouse_Right {
            bindings = <
 &trans  &trans  &trans  &trans  &trans                                                                                                         &none         &none            &none   &none   &none
 &trans  &trans  &trans  &trans  &trans  &trans                                                                                 &none           &none         &none            &none   &none   &none
 &trans  &trans  &trans  &trans  &trans  &trans                                                                        &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT   &none   &none
 &trans  &trans  &trans  &trans  &trans  &trans                                                                        &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT   &none   &none
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                &mkp MB4   &mkp MB5  &mkp MCLK           &none           &none         &none            &none   &none   &none
 &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &tog LAYER_Mouse_Right  &mkp RCLK  &mkp LCLK                          &trans        &trans           &trans  &trans  &trans
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
  &sys_reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none      &sys_reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none          &tog 1
            >;
        };

    };
};
